#include <Arduino.h>
#include "ConfigManager.h"
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
AsyncWebServer server(80);

#define VERSION "V2.4.1" //min version
#define allowOTA true
#define otaPassword "otapassword"

ConfigManagerClass cfg; // Create an instance of ConfigManager before using it in structures etc.
ConfigManagerClass::LogCallback ConfigManagerClass::logger = nullptr; // Initialize the logger to nullptr

// Example of a structure for WiFi settings
struct WiFi_Settings //wifiSettings
{
    Config<String> wifiSsid;
    Config<String> wifiPassword;
    Config<bool> useDhcp;
    Config<String> staticIp;
    Config<String> gateway;
    Config<String> subnet;

    WiFi_Settings() :
    wifiSsid(ConfigOptions<String>{ .keyName = "ssid", .category = "wifi", .defaultValue = "MyWiFi", .prettyName = "WiFi SSID", .prettyCat = "Network Settings" }),
    wifiPassword(ConfigOptions<String>{ .keyName = "password", .category = "wifi", .defaultValue = "secretpass", .prettyName = "WiFi Password", .prettyCat = "Network Settings", .showInWeb = true, .isPassword = true }),
    useDhcp(ConfigOptions<bool>{ .keyName = "dhcp", .category = "network", .defaultValue = false, .prettyName = "Use DHCP", .prettyCat = "Network Settings" }),
    staticIp(ConfigOptions<String>{ .keyName = "sIP", .category = "network", .defaultValue = "192.168.2.126", .prettyName = "Static IP", .prettyCat = "Network Settings", .showIf = [this]() { return !this->useDhcp.get(); } }),
    subnet(ConfigOptions<String>{ .keyName = "subnet", .category = "network", .defaultValue = "255.255.255.0", .prettyName = "Subnet-Mask", .prettyCat = "Network Settings", .showIf = [this]() { return !this->useDhcp.get(); } }),
    gateway(ConfigOptions<String>{ .keyName = "GW", .category = "network", .defaultValue = "192.168.2.250", .prettyName = "Gateway", .prettyCat = "Network Settings", .showIf = [this]() { return !this->useDhcp.get(); } })

    {
        cfg.addSetting(&wifiSsid);
        cfg.addSetting(&wifiPassword);
        cfg.addSetting(&useDhcp);
        cfg.addSetting(&staticIp);
        cfg.addSetting(&gateway);
        cfg.addSetting(&subnet);
    }
};

WiFi_Settings wifiSettings; // Create an instance of WiFi_Settings-Struct


void setup()
{
    Serial.begin(115200);

    //-----------------------------------------------------------------
    // Set logger callback to log in your own way, but do this before using the cfg object!
    ConfigManagerClass::setLogger([](const char *msg){
            Serial.print("[CFG] ");
            Serial.println(msg);
        });

    //-----------------------------------------------------------------

    // Register example runtime provider
    cfg.addRuntimeProvider({
        .name = "system",
        .fill = [](JsonObject &o){
            o["freeHeap"] = ESP.getFreeHeap();
            o["rssi"] = WiFi.RSSI();
        }
    });

    cfg.defineRuntimeField("system", "freeHeap", "Free Heap", "B", 0);
    cfg.defineRuntimeField("system", "rssi", "WiFi RSSI", "dBm", 0);

    try
    {
    cfg.loadAll(); // Load all settings from preferences
    }
    catch(const std::exception& e)
    {
         Serial.println(e.what());
    }
   
    if (wifiSettings.wifiSsid.get().length() == 0)
    {
        Serial.printf("‚ö†Ô∏è SETUP: SSID is empty! [%s]\n", wifiSettings.wifiSsid.get().c_str());
        cfg.startAccessPoint();
    }

    if (WiFi.getMode() == WIFI_AP)
    {
        Serial.printf("üñ•Ô∏è  AP Mode! \n");
        return; // Skip webserver setup in AP mode
    }

    if (wifiSettings.useDhcp.get()) {
        Serial.println("DHCP enabled");
        cfg.startWebServer(wifiSettings.wifiSsid.get(), wifiSettings.wifiPassword.get());
    } else {
        Serial.println("DHCP disabled");
        cfg.startWebServer(wifiSettings.staticIp.get(), wifiSettings.gateway.get(), wifiSettings.subnet.get(), wifiSettings.wifiSsid.get(), wifiSettings.wifiPassword.get());
    }


    // Enable WebSocket push
    cfg.enableWebSocketPush(2000); // 2s Interval
    delay(1500);
    if (WiFi.status() == WL_CONNECTED && allowOTA) {
        cfg.setupOTA("Ota-esp32-device", otaPassword);
    }
    Serial.printf("üñ•Ô∏è Webserver running at: %s\n", WiFi.localIP().toString().c_str());
}

void loop()
{
    cfg.handleClient();
    cfg.handleWebsocketPush();
    cfg.handleOTA();

    delay(500);
}